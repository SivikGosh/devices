version: "3.8"

services:

  db:
    container_name: devices_db
    image: postgres:13.0-alpine
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres

  devices:
    container_name: devices_app
    build:
      context: ../devices
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - db

  nginx:
    container_name: devices_server
    image: nginx:1.21.3-alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - static_value:/var/html/static/
      - media_value:/var/html/media/
    depends_on:
      - devices


volumes:
  db_data:
    name: devices_db
  static_value:
    name: devices_static
  media_value:
    name: devices_media

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

